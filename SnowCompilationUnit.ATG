import java.util.ArrayList;
import snow.ast.node.*;

COMPILER SnowCompilationUnit
	public BaseAstNode ast;

	public snow.ast.Token toSnowToken(Token t) {
		return new snow.ast.Token(
			t.pos,
			t.charPos,
			t.col,
			t.line,
			t.val
		);
	}

CHARACTERS
	noQuote = ANY - '"'.
	tab = '\t'.
	cr = '\r'.
	lf = '\n'.
	digit = "0123456789".
	letter = "azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN".

TOKENS
	string = '"' {noQuote} '"'.
	integer = digit {digit}.
	additiveOperator = '+'.
	multiplicativeOperator = '*'.
	identifier = letter {letter | digit}.
	fun = "fun".
	def = "def".

COMMENTS
	FROM "//" TO cr lf

IGNORE tab+cr+lf

PRODUCTIONS

	SnowCompilationUnit
			(. BaseAstNode node; .)
		= Expression<out node>
			(. this.ast = node; .)
		.

	Expression<out BaseAstNode node>
			(. node = null; .)
		= AdditiveValue<out node>
		| Definition<out node>
		.

	Definition<out Definition node>
			(. Token firstToken; Identifier id; BaseAstNode value; BaseAstNode typeExpr = null; .)
		= def (. firstToken = t; .) Identifier<out id> [':' Expression<out typeExpr>] '=' Expression<out value>
			(. node = new Definition(toSnowToken(firstToken), toSnowToken(t), id, value, typeExpr); .)
		.

	AdditiveValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= MultiplicativeValue<out node> {additiveOperator (. operator = t.val; .) MultiplicativeValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	MultiplicativeValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= CallExpression<out node> {multiplicativeOperator (. operator = t.val; .) CallExpression<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	CallExpression<out BaseAstNode node>
			(. BaseAstNode callee; Token firstToken; node = null; BaseAstNode arg = null;.)
		= SubExpression<out node> (. firstToken = t; .) ['(' [Expression<out arg>] ')' (. node = new Call(toSnowToken(firstToken), toSnowToken(t), node, arg); .)]
		.

	SubExpression<out BaseAstNode node>
			(. node = null; .)
		= '(' Expression<out node> ')'
		| Literal<out node>
		| Identifier<out node>
		| AnonymousFunction<out node>
		.

	AnonymousFunction<out Function node>
			(. BaseAstNode exprNode; Token funToken; Identifier argName = null; BaseAstNode argType = null; .)
		= fun (. funToken = t; .) '(' [Identifier<out argName> [':' Expression<out argType>]] ')' '{' Expression<out exprNode> '}'
			(. node = new Function(toSnowToken(funToken), toSnowToken(t), null, exprNode, argName, argType); .)
		.

	Identifier<out Identifier node>
		= identifier
			(. node = new Identifier(toSnowToken(t)); .)
		.

	Literal<out BaseAstNode node>
			(. node = null; .)
		= LiteralInteger<out node>
		| LiteralString<out node>
		.

	LiteralInteger<out LiteralInteger node>
		= integer
			(. node = new LiteralInteger(this.toSnowToken(t)); .)
		.

	LiteralString<out LiteralString node>
		= string
			(. node = new LiteralString(this.toSnowToken(t)); .)
		.

END SnowCompilationUnit.
