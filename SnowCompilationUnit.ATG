import java.util.ArrayList;
import snow.ast.node.*;

COMPILER SnowCompilationUnit
	public BaseAstNode ast;

	public snow.ast.Token toSnowToken(Token t) {
		return new snow.ast.Token(
			t.pos,
			t.charPos,
			t.col,
			t.line,
			t.val
		);
	}

CHARACTERS
	noQuote = ANY - '"'.
	tab = '\t'.
	cr = '\r'.
	lf = '\n'.
	digit = "0123456789".

TOKENS
	string = '"' {noQuote} '"'.
	integer = digit {digit}.
	additiveOperator = '+'.
	multiplicativeOperator = '*'.

COMMENTS
	FROM "//" TO cr lf

IGNORE tab+cr+lf

PRODUCTIONS

	SnowCompilationUnit (. BaseAstNode node; .) = Expression<out node> (. this.ast = node; .) .

	Expression<out BaseAstNode node> = AdditiveValue<out node> .

	AdditiveValue<out BaseAstNode node> (. String operator; BaseAstNode nextNode; .)
		= MultiplicativeValue<out node> {additiveOperator (. operator = t.val; .) MultiplicativeValue<out nextNode> (. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	MultiplicativeValue<out BaseAstNode node> (. String operator; BaseAstNode nextNode; .)
		= SubExpression<out node> {multiplicativeOperator (. operator = t.val; .) SubExpression<out nextNode> (. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	SubExpression<out BaseAstNode node> (. node = null; .)
		= '(' Expression<out node> ')'
		| Literal<out node>
		.

	Literal<out BaseAstNode node> (. node = null; .) = LiteralInteger<out node> | LiteralString<out node> .

	LiteralInteger<out LiteralInteger node> = integer (. node = new LiteralInteger(this.toSnowToken(t)); .) .

	LiteralString<out LiteralString node> = string (. node = new LiteralString(this.toSnowToken(t)); .) .

END SnowCompilationUnit.
