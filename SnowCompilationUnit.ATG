import java.util.ArrayList;
import java.util.List;
import snow.parser.node.*;
import snow.parser.util.*;

COMPILER SnowCompilationUnit
	public BaseAstNode ast;

	public snow.parser.Token toSnowToken(Token t) {
		return new snow.parser.Token(
			t.pos,
			t.charPos,
			t.col,
			t.line,
			t.val
		);
	}

CHARACTERS
	noQuote = ANY - '"'.
	tab = '\t'.
	cr = '\r'.
	lf = '\n'.
	digit = "0123456789".
	letter = "azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN".

TOKENS
	string = '"' {noQuote} '"'.
	integer = digit {digit}.
	additiveOperator = '+' | '-'.
	multiplicativeOperator = '*' | '/' | '%'.
	equalityOperator = "==" | "!=".
	unaryOperator = "++" | "--".
	prefixUnaryOperator = '!' | '~'.
	identifier = letter {letter | digit}.
	fun = "fun".
	def = "def".
	if = "if".
	else = "else".
	class = "class".
	bracketOpen = '['.

COMMENTS
	FROM "//" TO cr lf

IGNORE tab+cr+lf

PRODUCTIONS

	SnowCompilationUnit
			(. BaseAstNode node; .)
		= ExpressionList<out node>
			(. this.ast = node; .)
		.

	ExpressionList<out BaseAstNode node>
			(. BaseAstNode secondNode; .)
		= Expression<out node> {';' Expression<out secondNode> (. node = new ExpressionList(null, null, node, secondNode); .)}
		.

	Expression<out BaseAstNode node>
			(. node = null; .)
		= LogicalOrValue<out node>
		| If<out node>
		| Definition<out node>
		| SnowClass<out node>
		| SnowType<out node>
		.

	TypeExpression<out BaseAstNode node>
			(. Token firstToken; .)
		= NotArrayTypeExpression<out node> (. firstToken = t; .) {IF (la.kind == _bracketOpen) '[' ']'
			(. node = new TypeArray(toSnowToken(firstToken), toSnowToken(t), node); .)}
		.

	NotArrayTypeExpression<out BaseAstNode node>
			(. node = null; .)
		= TypeGeneric<out node>
		| TypeInterface<out node>
		| TypeTuple<out node>
		| TypeFunction<out node>
		.

	TypeInterface<out TypeInterface node>
			(. Token firstToken; Identifier name; TypeInterfaceMember currentMember; List<TypeInterfaceMember> members = new ArrayList<>(); .)
		= '{' (. firstToken = t; .) {TypeInterfaceMember<out currentMember> (. members.add(currentMember); .) ';'} '}'
			(. node = new TypeInterface(toSnowToken(firstToken), toSnowToken(t), members); .)
		.

	TypeInterfaceMember<out TypeInterfaceMember node>
			(. Token firstToken; List<Argument> arguments = new ArrayList<>(); Argument currentArgument; Identifier identifier; BaseAstNode typeExpr; .)
		= Identifier<out identifier> (. firstToken = t; .) [ '(' [Argument<out currentArgument> (. arguments.add(currentArgument); .) {',' Argument<out currentArgument> (. arguments.add(currentArgument); .)}] ')' ] ':' TypeExpression<out typeExpr>
			(. node = new TypeInterfaceMember(toSnowToken(firstToken), toSnowToken(t), identifier, arguments, typeExpr); .)
		.

	Argument<out Argument node>
			(. Token firstToken; BaseAstNode typeExpr; Identifier identifier; .)
		= Identifier<out identifier> (. firstToken = t; .) ':' TypeExpression<out typeExpr>
			(. node = new Argument(toSnowToken(firstToken), toSnowToken(t), identifier, typeExpr); .)
		.

	TypeGeneric<out BaseAstNode node>
			(. Token firstToken; BaseAstNode typeExpr = null; .)
		= Identifier<out node> (. firstToken = t; .) [ '<' TypeExpression<out typeExpr> '>'
			(. node = new TypeGeneric(toSnowToken(firstToken), toSnowToken(t), node, typeExpr); .) ]
		.

	TypeFunction<out BaseAstNode node>
			(. Token firstToken; BaseAstNode argType = null; BaseAstNode returnType; TypeFunctionParameterList parameters = null; .)
		= "fun" (. firstToken = t; .) '(' [ TypeFunctionParameterList<out parameters> ] ')' ':' TypeExpression<out returnType>
			(. node = new TypeFunction(toSnowToken(firstToken), toSnowToken(t), parameters, returnType); .)
		.

	TypeFunctionParameterList<out TypeFunctionParameterList node>
			(. TypeFunctionParameter parameter; List<TypeFunctionParameter> parameters = new ArrayList<>(); Token firstToken = la; .)
		= TypeFunctionParameter<out parameter> (. parameters.add(parameter); .) { ',' TypeFunctionParameter<out parameter> (. parameters.add(parameter); .) }
			(. node = new TypeFunctionParameterList(toSnowToken(firstToken), toSnowToken(t), parameters); .)
		.

	TypeFunctionParameter<out TypeFunctionParameter identifierAndType>
			(. Identifier identifier; BaseAstNode type = null; Token firstToken = la; .)
		= Identifier<out identifier> [ ':' TypeExpression<out type> ]
			(. identifierAndType = new TypeFunctionParameter(toSnowToken(firstToken), toSnowToken(t), identifier, type); .)
		.

	TypeTuple<out BaseAstNode node>
			(. Token firstToken; BaseAstNode typeExpr = null; List<BaseAstNode> types = new ArrayList<>(); BaseAstNode currentTypeExpr = null; .)
		= '(' (. firstToken = t; .) TypeExpression<out currentTypeExpr> (. types.add(currentTypeExpr); .) {',' TypeExpression<out currentTypeExpr> (. types.add(currentTypeExpr); .) } ')'
			(. node = new TypeTuple(toSnowToken(firstToken), toSnowToken(t), types); .)
		.

	SnowType<out BaseAstNode node>
			(. Token firstToken; Identifier name; BaseAstNode typeExpr; .)
		= "type" (. firstToken = t; .) Identifier<out name> TypeExpression<out typeExpr>
			(. node = new SnowType(toSnowToken(firstToken), toSnowToken(t), name, typeExpr); .)
		.

	SnowClass<out SnowClass node>
			(. Token firstToken; Identifier id; BaseAstNode body = null; .)
		= class (. firstToken = t; .) Identifier<out id> '{' [ExpressionList<out body>] '}'
			(. node = new SnowClass(toSnowToken(firstToken), toSnowToken(t), id, body); .)
		.

	If<out If node>
			(. Token firstToken; BaseAstNode condition; BaseAstNode ifTrue; BaseAstNode ifFalse = null; .)
		= if (. firstToken = t; .) '(' ExpressionList<out condition> ')' Expression<out ifTrue> [IF(la.kind == _else) else Expression<out ifFalse>]
			(. node = new If(toSnowToken(firstToken), toSnowToken(t), condition, ifTrue, ifFalse); .)
		.

	TupleValue<out BaseAstNode node>
			(. Token firstToken; BaseAstNode right = null; .)
		= LogicalOrValue<out node> (. firstToken = t; .) {',' LogicalOrValue<out right>
			(. node = new Tuple(toSnowToken(firstToken), toSnowToken(t), node, right); .) }
			(. node.doNotReplace(); .)
		.

	Definition<out Definition node>
			(. Token firstToken; Identifier id; BaseAstNode value; BaseAstNode typeExpr = null; .)
		= def (. firstToken = t; .) Identifier<out id> [':' TypeExpression<out typeExpr>] '=' Expression<out value>
			(. node = new Definition(toSnowToken(firstToken), toSnowToken(t), id, value, typeExpr); .)
		.

	LogicalOrValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= LogicalAndValue<out node> {"||" (. operator = t.val; .) LogicalAndValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	LogicalAndValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= BitwiseOrValue<out node> {"&&" (. operator = t.val; .) BitwiseOrValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	BitwiseOrValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= BitwiseXorValue<out node> {'|' (. operator = t.val; .) BitwiseXorValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	BitwiseXorValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= BitwiseAndValue<out node> {'^' (. operator = t.val; .) BitwiseAndValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	BitwiseAndValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= EqualityValue<out node> {'&' (. operator = t.val; .) EqualityValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	EqualityValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= RelationalValue<out node> {equalityOperator (. operator = t.val; .) RelationalValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	RelationalValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= ShiftValue<out node> {RelationalOperator (. operator = t.val; .) ShiftValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.


	RelationalOperator
		= '<'
		| '>'
		| "<="
		| ">="
		.

	ShiftValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= AdditiveValue<out node> {ShiftOperator (. operator = t.val; .) AdditiveValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	ShiftOperator
		= "<<"
		| ">>"
		.

	AdditiveValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= MultiplicativeValue<out node> {additiveOperator (. operator = t.val; .) MultiplicativeValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	MultiplicativeValue<out BaseAstNode node>
			(. String operator; BaseAstNode nextNode; .)
		= PostfixUnaryValue<out node> {multiplicativeOperator (. operator = t.val; .) PostfixUnaryValue<out nextNode>
			(. node = new Binary(null, null, node, nextNode, operator); .) }
		.

	PostfixUnaryValue<out BaseAstNode node>
			(. Token firstToken; .)
		= PrefixUnaryValue<out node> (. firstToken = t; .) {unaryOperator (. node = new Unary(toSnowToken(firstToken), toSnowToken(t), node, t.val, true); .)}
		.

	PrefixUnaryValue<out BaseAstNode node> (. Box<BaseAstNode> boxedNode = new Box<>(null); Unary unaryNode = null; List<PartialUnary> pendingUnaries = new ArrayList<>(); .)
		= {(unaryOperator | prefixUnaryOperator) (. pendingUnaries.add(0, new PartialUnary(null, null, t.val)); .) } AccessValue<out node> (. boxedNode.setValue(node); .)
			(. pendingUnaries.forEach(u -> boxedNode.setValue(new Unary(u.firstToken, u.lastToken, boxedNode.getValue(), u.operator, false))); node = boxedNode.getValue(); .)
		.

	AccessValue<out BaseAstNode node>
			(. Token firstToken; Token firstFunctionToken; Token lastFunctionToken; String operator; BaseAstNode nextNode; ArgumentList arguments = null; BaseAstNode funcBody = null; .)
		= SubExpression<out node> (. firstToken = t; .) {
				('.' (. operator = t.val; .) SubExpression<out nextNode>) (. node = new Binary(null, null, node, nextNode, operator); .)
				| ('[' (. operator = t.val; .) SubExpression<out nextNode> ']') (. node = new Binary(null, null, node, nextNode, operator); .)
				| '(' [ ArgumentList<out arguments> ] ')' [ '{' (. firstFunctionToken = t; .) ExpressionList<out funcBody> '}' (. lastFunctionToken = t; .) (. arguments = arguments.add(new Function(toSnowToken(firstFunctionToken), toSnowToken(lastFunctionToken), null, funcBody, null, null, null)); .) ] (. node = new Call(toSnowToken(firstToken), toSnowToken(t), node, arguments); .)
			}
		.

	ArgumentList<out ArgumentList argumentList >
			(. List<BaseAstNode> arguments = new ArrayList<>(); BaseAstNode expr; Token firstToken = la; .)
		= Expression<out expr> (. arguments.add(expr); .) { ',' Expression<out expr> (. arguments.add(expr); .) }
			(. argumentList = new ArgumentList(toSnowToken(firstToken), toSnowToken(t), arguments); .)
		.

	SubExpression<out BaseAstNode node>
			(. node = null; .)
		= '(' TupleValue<out node> ')'
		| Literal<out node>
		| Identifier<out node>
		| AnonymousFunction<out node>
		| PrimitiveOperation<out node>
		.

	PrimitiveOperation<out BaseAstNode node>
			(. Token firstToken; ArgumentList argumentList = new ArrayList<BaseAstNode>(); Identifier operationIdentifier; .)
		= '#' (. firstToken = t; .) Identifier<out operationIdentifier> '(' [ ArgumentList<out argumentList> ] ')'
			(. node = new PrimitiveOperation(toSnowToken(firstToken), toSnowToken(t), operationIdentifier, argumentList); .)
		.

	AnonymousFunction<out Function node>
			(. BaseAstNode exprNode = null; Token firstToken; Identifier argName = null; BaseAstNode argType = null; BaseAstNode returnType = null; .)
		= fun (. firstToken = t; .) '(' [Identifier<out argName> [':' TypeExpression<out argType>]] ')' [':' TypeExpression<out returnType>] '{' [Expression<out exprNode>] '}'
			(. node = new Function(toSnowToken(firstToken), toSnowToken(t), null, exprNode, argName, argType, returnType); .)
		.

	Identifier<out Identifier node>
		= identifier
			(. node = new Identifier(toSnowToken(t)); .)
		.

	Literal<out BaseAstNode node>
			(. node = null; .)
		= LiteralInteger<out node>
		| LiteralString<out node>
		.

	LiteralInteger<out LiteralInteger node>
		= integer
			(. node = new LiteralInteger(this.toSnowToken(t)); .)
		.

	LiteralString<out LiteralString node>
		= string
			(. node = new LiteralString(this.toSnowToken(t)); .)
		.

END SnowCompilationUnit.
